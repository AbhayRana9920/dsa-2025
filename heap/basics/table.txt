| **Concept**                 | **Explanation**                                                 | **Java Syntax / Example**                                                                 | **DSA Use Case**                       |
| --------------------------- | --------------------------------------------------------------- | ----------------------------------------------------------------------------------------- | -------------------------------------- |
| **Definition**              | Heap is a **complete binary tree** with heap property (min/max) | `PriorityQueue<Integer> minHeap = new PriorityQueue<>();`                                 | Min/Max retrieval, priority scheduling |
| **Min-Heap**                | Parent ≤ children                                               | `PriorityQueue<Integer> minHeap = new PriorityQueue<>();`                                 | Top-k smallest elements                |
| **Max-Heap**                | Parent ≥ children                                               | `PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());`       | Top-k largest elements                 |
| **Insert / Add**            | Add element to heap                                             | `heap.add(10); heap.offer(20);`                                                           | Insert into heap                       |
| **Peek / Element**          | Get root element without removing                               | `heap.peek(); heap.element();`                                                            | Access min/max                         |
| **Poll / Remove**           | Remove and return root                                          | `heap.poll(); heap.remove();`                                                             | Extract min/max                        |
| **Size / isEmpty**          | Heap size, empty check                                          | `heap.size(); heap.isEmpty();`                                                            | Looping / termination checks           |
| **Heapify array**           | Convert array to heap                                           | `PriorityQueue<Integer> pq = new PriorityQueue<>(Arrays.asList(arr));`                    | Sorting, top-k problems                |
| **Custom objects**          | Heap of objects using Comparator                                | `PriorityQueue<Student> pq = new PriorityQueue<>(Comparator.comparingInt(s -> s.marks));` | DSA problems with custom priority      |
| **Remove specific element** | Delete element from heap                                        | `heap.remove(20);`                                                                        | Priority removal                       |
| **Convert to array / list** | For iteration or sorting                                        | `Integer[] arr = heap.toArray(new Integer[0]);`                                           | Post-processing                        |
