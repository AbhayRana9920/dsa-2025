| **Topic**                | **Concept**                                     | **Explanation**                           | **Java Syntax / Example**                                                                 | **DSA Use Case**                        |
| ------------------------ | ----------------------------------------------- | ----------------------------------------- | ----------------------------------------------------------------------------------------- | --------------------------------------- |
| **Array**                | Definition                                      | Fixed-size, contiguous memory             | `int[] arr = new int[5];`                                                                 | Store sequence of elements              |
|                          | Access / Update                                 | Access by index, update value             | `arr[0] = 10; int x = arr[2];`                                                            | Random access, basic DSA                |
|                          | Traversal                                       | Loop through array                        | `for(int x : arr){...}`                                                                   | Process elements                        |
|                          | Sum / Max / Min                                 | Compute sums, find max/min                | `int sum=0; int max=arr[0];`                                                              | Common array problems                   |
|                          | Sort / Reverse                                  | Sort or reverse array                     | `Arrays.sort(arr); Collections.reverse(Arrays.asList(arr));`                              | Sorting / Two-pointer techniques        |
|                          | Search                                          | Linear / Binary Search                    | `Arrays.binarySearch(arr, key);`                                                          | Search problems                         |
|                          | Remove Duplicates                               | Remove duplicates in sorted array         | Custom method using loop                                                                  | Preprocessing                           |
| **ArrayList**            | Dynamic Array                                   | Resizable array                           | `ArrayList<Integer> list = new ArrayList<>();`                                            | Store dynamic data                      |
|                          | Add / Insert / Remove                           | Add at end, index, remove by value/index  | `list.add(10); list.add(1, 20); list.remove(0);`                                          | DSA list manipulation                   |
|                          | Get / Set                                       | Access / modify element                   | `list.get(0); list.set(1, 30);`                                                           | Random access                           |
|                          | Iteration / Traversal                           | Loop through elements                     | `for(int x : list){...}`                                                                  | Traversing                              |
|                          | Size / isEmpty                                  | Number of elements / empty check          | `list.size(); list.isEmpty();`                                                            | Condition checks                        |
|                          | Sorting / Reverse                               | Sort / reverse ArrayList                  | `Collections.sort(list); Collections.reverse(list);`                                      | Sorting problems                        |
| **LinkedList**           | Doubly Linked List                              | Nodes with prev/next                      | `LinkedList<Integer> ll = new LinkedList<>();`                                            | Dynamic insertion/deletion              |
|                          | Add / AddFirst / AddLast                        | Insert elements                           | `ll.add(10); ll.addFirst(5); ll.addLast(20);`                                             | Queue / Stack                           |
|                          | Remove / RemoveFirst / RemoveLast               | Remove elements                           | `ll.remove(0); ll.removeFirst(); ll.removeLast();`                                        | Queue / Stack                           |
|                          | Get / Set / Contains                            | Access / modify / check                   | `ll.get(0); ll.set(1, 30); ll.contains(10);`                                              | Traversal & checks                      |
|                          | Iteration / Size / isEmpty                      | Loop and info                             | `for(int x : ll){...}`                                                                    | Traversal & conditions                  |
| **Stack**                | LIFO Structure                                  | Last In First Out                         | `Stack<Integer> st = new Stack<>();`                                                      | Backtracking, undo                      |
|                          | Push / Pop / Peek                               | Add, remove, top                          | `st.push(10); st.pop(); st.peek();`                                                       | Stack problems                          |
|                          | isEmpty / Search                                | Check empty / search element              | `st.isEmpty(); st.search(10);`                                                            | Condition & search                      |
| **Queue**                | FIFO Structure                                  | First In First Out                        | `Queue<Integer> q = new LinkedList<>();`                                                  | BFS, task scheduling                    |
|                          | Add / Offer / Remove / Poll                     | Enqueue / Dequeue                         | `q.add(10); q.offer(20); q.remove(); q.poll();`                                           | Basic queue operations                  |
|                          | Peek / Element                                  | Access front element without removing     | `q.peek(); q.element();`                                                                  | BFS & inspection                        |
|                          | Size / isEmpty / Iteration                      | Info & loop                               | `q.size(); q.isEmpty(); for(int x : q){...}`                                              | Traversal & check                       |
| **PriorityQueue / Heap** | Min-Heap / Max-Heap                             | Complete binary tree, ordered by priority | `PriorityQueue<Integer> pq = new PriorityQueue<>();`                                      | Top-k, scheduling                       |
|                          | Add / Offer / Poll / Peek                       | Insert / remove root / access root        | `pq.add(10); pq.poll(); pq.peek();`                                                       | Extract-min / max                       |
|                          | Heapify / Custom Comparator                     | Build heap from array or objects          | `PriorityQueue<Student> pq = new PriorityQueue<>(Comparator.comparingInt(s -> s.marks));` | Custom priority problems                |
| **HashMap**              | Key-Value Mapping                               | Map keys to values                        | `HashMap<Integer,String> map = new HashMap<>();`                                          | Count, frequency, mapping               |
|                          | Put / Get / Remove / ContainsKey                | Add / Retrieve / Delete / Check key       | `map.put(1,"A"); map.get(1); map.remove(1); map.containsKey(1);`                          | Lookup, frequency                       |
|                          | Iteration (keys / values / entries)             | Loop over elements                        | `for(Map.Entry<Integer,String> e : map.entrySet()){...}`                                  | Traversal                               |
| **HashSet**              | Unique Elements                                 | Stores unique elements                    | `HashSet<Integer> set = new HashSet<>();`                                                 | Remove duplicates                       |
|                          | Add / Remove / Contains / Clear                 | Basic operations                          | `set.add(10); set.remove(10); set.contains(20); set.clear();`                             | Fast lookup                             |
|                          | Iteration / Convert to List                     | Traverse / sort                           | `for(int x : set){...}; List<Integer> list = new ArrayList<>(set);`                       | Traversal & sorting                     |
| **ArrayDeque**           | Double-ended queue                              | Add/remove from both ends                 | `ArrayDeque<Integer> dq = new ArrayDeque<>();`                                            | BFS, stack, queue                       |
|                          | addFirst / addLast / offerFirst / offerLast     | Insert elements safely                    | `dq.addFirst(10); dq.offerLast(20);`                                                      | Stack / Queue                           |
|                          | removeFirst / removeLast / pollFirst / pollLast | Remove elements safely                    | `dq.removeFirst(); dq.pollLast();`                                                        | Dequeue / pop                           |
|                          | peekFirst / peekLast                            | Access ends without removing              | `dq.peekFirst(); dq.peekLast();`                                                          | Inspect ends                            |
| **String**               | Immutable Sequence                              | Sequence of chars                         | `String s = "Hello";`                                                                     | Strings problems                        |
|                          | Length / CharAt / substring / concat            | Access length / char / slice / combine    | `s.length(); s.charAt(0); s.substring(1,3); s.concat("World");`                           | String manipulation                     |
|                          | Equals / CompareTo / contains                   | Compare or check substring                | `s.equals("Hello"); s.compareTo("Hi"); s.contains("el");`                                 | Comparisons & validation                |
| **StringBuilder**        | Mutable Sequence                                | Efficient string modification             | `StringBuilder sb = new StringBuilder("Hello");`                                          | Concatenation, reverse, dynamic strings |
|                          | Append / Insert / Delete / DeleteCharAt         | Modify string                             | `sb.append("!"); sb.insert(1,"X"); sb.delete(0,2);`                                       | Modify strings efficiently              |
|                          | Replace / Reverse / CharAt / SetCharAt          | Replace / reverse / access / modify char  | `sb.replace(0,3,"ABC"); sb.reverse(); sb.charAt(0); sb.setCharAt(0,'A');`                 | String manipulation DSA                 |
|                          | Length / Capacity / EnsureCapacity / TrimToSize | Properties & optimization                 | `sb.length(); sb.capacity(); sb.ensureCapacity(50); sb.trimToSize();`                     | Performance & capacity                  |
|                          | Substring / ToString / Chaining                 | Extract / convert / chain operations      | `sb.substring(0,3); sb.toString(); sb.append("X").insert(0,"Y");`                         | Complex string operations               |
