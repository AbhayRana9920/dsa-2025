| **Concept**                          | **Explanation**                                                          | **Java Syntax / Example**                                                       | **DSA Use Case**                      |
| ------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------------- | ------------------------------------- |
| **Definition**                       | LinkedList is a **doubly linked list** in Java (implements List & Deque) | `LinkedList<Integer> list = new LinkedList<>();`                                | Efficient insertion/deletion anywhere |
| **Add elements (end)**               | Add element to the end of list                                           | `list.add(10);`                                                                 | Append elements                       |
| **Add at index**                     | Insert element at specific position                                      | `list.add(1, 20);`                                                              | Insert anywhere                       |
| **Add first / Add last**             | Insert at beginning or end                                               | `list.addFirst(5); list.addLast(50);`                                           | Queue or deque operations             |
| **Remove by index / value**          | Delete element by index or value                                         | `list.remove(1); list.remove(Integer.valueOf(10));`                             | Deletion                              |
| **Remove first / last**              | Delete first or last element                                             | `list.removeFirst(); list.removeLast();`                                        | Queue or deque operations             |
| **Get / Set element**                | Access or update element                                                 | `list.get(1); list.set(1, 25);`                                                 | Random access, updates                |
| **Contains**                         | Check if element exists                                                  | `list.contains(20);`                                                            | Condition checks                      |
| **isEmpty() / size()**               | Check if list is empty / size                                            | `list.isEmpty(); list.size();`                                                  | Looping / checks                      |
| **Iteration**                        | Loop through elements                                                    | `for(int x : list)` or `Iterator<Integer> it = list.iterator()`                 | Traversal                             |
| **Clear**                            | Remove all elements                                                      | `list.clear();`                                                                 | Reset list                            |
| **Stack-like operations**            | Use as stack: push/pop/peek                                              | `list.push(10); list.pop(); list.peek();`                                       | Stack implementation                  |
| **Queue-like operations**            | Use as queue: offer/poll/peek                                            | `list.offer(10); list.poll(); list.peek();`                                     | Queue implementation                  |
| **Peek / Poll / Offer First / Last** | Access or remove elements at ends                                        | `list.peekFirst(); list.pollLast(); list.offerFirst(5);`                        | Deque operations                      |
| **AddAll / removeAll / retainAll**   | Perform bulk operations with another collection                          | `list.addAll(otherList); list.removeAll(otherList); list.retainAll(otherList);` | Union, difference, intersection       |
| **Sort / Collections.reverse**       | Sort list or reverse order                                               | `Collections.sort(list); Collections.reverse(list);`                            | Ordered output                        |
| **Convert to array / ArrayList**     | For array or indexed access                                              | `Integer[] arr = list.toArray(new Integer[0]);`                                 | Interfacing with arrays               |
| **Frequency count**                  | Count occurrences of elements                                            | `HashMap<Integer,Integer>` with loop                                            | Counting duplicates                   |
| **Null elements**                    | LinkedList allows multiple null elements                                 | `list.add(null);`                                                               | Edge case                             |
