| **Concept**                   | **Explanation**                                        | **Java Syntax / Example**                                                                | **DSA Use Case**                                           |
| ----------------------------- | ------------------------------------------------------ | ---------------------------------------------------------------------------------------- | ---------------------------------------------------------- |
| **Definition**                | Stack is a **LIFO (Last In First Out)** data structure | `Stack<Integer> stack = new Stack<>();`                                                  | Undo operations, expression evaluation, recursion problems |
| **Push**                      | Add element to top of stack                            | `stack.push(10);`                                                                        | Insert element                                             |
| **Pop**                       | Remove and return top element                          | `int top = stack.pop();`                                                                 | Remove element in LIFO order                               |
| **Peek / Top**                | View top element without removing                      | `int top = stack.peek();`                                                                | Check top element without modifying stack                  |
| **isEmpty()**                 | Check if stack is empty                                | `stack.isEmpty();`                                                                       | Condition checks in algorithms                             |
| **size()**                    | Returns number of elements                             | `stack.size();`                                                                          | Looping / capacity checks                                  |
| **search()**                  | Returns 1-based position from top, -1 if not found     | `int pos = stack.search(20);`                                                            | Searching for element                                      |
| **Iteration (bottom → top)**  | Loop through stack from bottom                         | `for(int x : stack)`                                                                     | Traversal for printing / calculations                      |
| **Iteration (top → bottom)**  | Loop from top using `ListIterator`                     | `ListIterator<Integer> it = stack.listIterator(stack.size()); while(it.hasPrevious())`   | Reverse traversal                                          |
| **ArrayDeque as Stack**       | Alternative to Stack class, more efficient             | `ArrayDeque<Integer> deque = new ArrayDeque<>(); deque.push(10);`                        | Modern Java practice for stack operations                  |
| **Convert Stack → ArrayList** | Create list from stack                                 | `ArrayList<Integer> list = new ArrayList<>(stack);`                                      | Easy manipulation or sorting                               |
| **Reverse Stack / View**      | Reverse elements without modifying original            | `Collections.reverse(list);`                                                             | Algorithmic problems needing reverse order                 |
| **Max / Min in Stack**        | Find largest / smallest element                        | `Collections.max(stack)`                                                                 | DSA problems requiring extremes                            |
| **Frequency Count**           | Count occurrences of elements                          | `HashMap<Integer,Integer> freq = new HashMap<>(); freq.put(x,freq.getOrDefault(x,0)+1);` | Counting duplicates in stack                               |
| **Clear Stack**               | Remove all elements                                    | `stack.clear();`                                                                         | Reset stack for reuse                                      |
| **Null elements**             | Stack allows `null` values                             | `stack.push(null);`                                                                      | Edge cases                                                 |
