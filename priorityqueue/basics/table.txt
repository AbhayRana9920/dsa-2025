| **Concept**                      | **Explanation**                                                          | **Java Syntax / Example**                                                         | **DSA Use Case**                            |
| -------------------------------- | ------------------------------------------------------------------------ | --------------------------------------------------------------------------------- | ------------------------------------------- |
| **Definition**                   | PriorityQueue is a **heap-based queue** that orders elements by priority | `PriorityQueue<Integer> pq = new PriorityQueue<>();`                              | Implement min-heap / max-heap               |
| **Min-Heap (default)**           | Elements are ordered in **ascending order** by default                   | `PriorityQueue<Integer> pq = new PriorityQueue<>();`                              | Get smallest element efficiently            |
| **Max-Heap**                     | Use Comparator to reverse order                                          | `PriorityQueue<Integer> maxPQ = new PriorityQueue<>(Collections.reverseOrder());` | Get largest element efficiently             |
| **Add elements**                 | Add element to the queue                                                 | `pq.add(10); pq.offer(20);`                                                       | Insertion                                   |
| **Peek**                         | View **head element** without removing                                   | `pq.peek();`                                                                      | Check min / max without removing            |
| **Poll**                         | Remove and return **head element**                                       | `pq.poll();`                                                                      | Remove min / max                            |
| **Remove specific element**      | Remove a particular element                                              | `pq.remove(20);`                                                                  | Delete any element                          |
| **Contains**                     | Check if element exists in PQ                                            | `pq.contains(30);`                                                                | Condition checks                            |
| **isEmpty / size**               | Check if PQ is empty / size                                              | `pq.isEmpty(); pq.size();`                                                        | Looping / capacity check                    |
| **Clear**                        | Remove all elements                                                      | `pq.clear();`                                                                     | Reset PQ                                    |
| **Bulk add / addAll**            | Add multiple elements                                                    | `pq.addAll(list);`                                                                | Insert collection efficiently               |
| **Convert to List / Array**      | For sorting, reversing, or indexed access                                | `List<Integer> list = new ArrayList<>(pq);`                                       | Sort / reverse / random access              |
| **Custom Comparator**            | Change the natural order (min/max or custom criteria)                    | `new PriorityQueue<>(Comparator.reverseOrder())`                                  | Max-Heap / custom priority                  |
| **Frequency count example**      | Use PQ with HashMap to count frequencies                                 | `HashMap<Integer,Integer> freq = new HashMap<>();`                                | Solve problems like top K frequent elements |
| **Heap operations (conceptual)** | Internally maintains **heap property** for fast min/max access           | Automatic during add / poll                                                       | Efficient priority-based retrieval          |
| **Null elements**                | PQ does **not allow null**                                               | `pq.add(null); // Error`                                                          | Edge case                                   |
